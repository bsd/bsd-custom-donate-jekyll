/* BSD team's approved mixins */

@mixin opacity($opacity){
    $ieop: floor($opacity * 100);
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=$ieop)";
    filter: alpha(opacity=$ieop);
    opacity: $opacity;
}

@mixin transition($trans: all, $duration: 0.1s, $function: linear) {
  -webkit-transition: $trans $duration $function;
  -moz-transition: $trans $duration $function;
  -o-transition: $trans $duration $function;
  -ms-transition: $trans $duration $function;
  transition: $trans $duration $function;
}
@mixin transition2($trans: all, $duration: 0.1s, $function: linear, $trans2: all, $duration2: 0.1s, $function2: linear) {
  -webkit-transition: $trans $duration $function, $trans2 $duration2 $function2;
  -moz-transition: $trans $duration $function, $trans2 $duration2 $function2;
  -o-transition: $trans $duration $function, $trans2 $duration2 $function2;
  -ms-transition: $trans $duration $function, $trans2 $duration2 $function2;
  transition: $trans $duration $function, $trans2 $duration2 $function2;
}
@mixin gradient($top, $bottom, $topPercent: 0%, $bottomPercent: 100%, $fallback: "fallback.png") {
  background-color: $bottom;
  background-position: 0 0;
  background-repeat: repeat-x;
  @if not $fallback == "fallback.png" {
    background-image: url($fallback);
  }
  background: -webkit-gradient(linear, left top, left bottom, color-stop($topPercent, $top), color-stop($bottomPercent, $bottom));
  background: -webkit-linear-gradient(top, $top $topPercent, $bottom $bottomPercent);
  background:    -moz-linear-gradient(top, $top $topPercent, $bottom $bottomPercent);
  background:      -o-linear-gradient(top, $top $topPercent, $bottom $bottomPercent);
  background:     -ms-linear-gradient(top, $top $topPercent, $bottom $bottomPercent);
  background:   linear-gradient(to bottom, $top $topPercent, $bottom $bottomPercent);
  //filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$top', endColorstr='$bottom',GradientType=0 );
}
@mixin round($size: $default-corner-radius) {
  -webkit-border-radius: $size;
          border-radius: $size;
  -moz-background-clip: padding; -webkit-background-clip: padding-box; background-clip: padding-box;
}
@mixin border-box() { 
  -moz-box-sizing: border-box; 
  -webkit-box-sizing: border-box; 
  box-sizing: border-box;
}
@mixin no-border-box() { 
  -moz-box-sizing: content-box; 
  -webkit-box-sizing: content-box; 
  box-sizing: content-box;
}
@mixin box-shadow($args...) {
  -webkit-box-shadow: $args;
          box-shadow: $args;
}
@mixin font-size($sizeValue: $default-font-size, $line-h: $default-line-height ){
    $line: $sizeValue * $line-h;
    font-size: ($sizeValue * 1) + px;
    line-height: ($line * 1) + px;
    font-size: ($sizeValue / 10) + rem;
    line-height: ($line / 10) + rem;
}
@mixin font-size-only($sizeValue: $default-font-size){
    font-size: ($sizeValue * 1) + px;
    font-size: ($sizeValue / 10) + rem;
}
@mixin font-line-height-only($sizeValue: $default-font-size, $line-h: $default-line-height ){
    $line: $sizeValue * $line-h;
    line-height: ($line * 1) + px;
    line-height: ($line / 10) + rem;
}
@function font-rem-size-only($sizeValue: $default-font-size){
    @return ($sizeValue / 10) + rem;
}
@function font-rem-line-height-only($sizeValue: $default-font-size, $line-h: $default-line-height ){
    $line: $sizeValue * $line-h;
    @return ($line / 10) + rem;
}
@mixin font-based-height($sizeValue: $default-font-size, $line-h: $default-line-height ){
    $line: $sizeValue * $line-h;
    height: ($line * 1) + px;
}
@function extra-line-height-px($sizeValue: $default-font-size, $line-h: $default-line-height ){
    $line: $sizeValue * $line-h;
    @return (($line - $sizeValue)  * 1);
}
// Mixin for stying placeholders
@mixin placeholder($color) {
    ::-webkit-input-placeholder {
        color: $color;
    }
 
    :-moz-placeholder { /* Firefox 18- */
        color: $color;  
    }
 
    ::-moz-placeholder {  /* Firefox 19+ */
        color: $color;  
    }
 
    :-ms-input-placeholder {  
        color: $color;  
    }
}
@mixin position ($position: relative, $coordinates: 0 0 0 0) {

  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  position: $position;

  @if $top == auto {
    top: $top;
  }
  @else if not(unitless($top)) {
    top: $top;
  }

  @if $right == auto {
    right: $right;
  }
  @else if not(unitless($right)) {
    right: $right;
  }

  @if $bottom == auto {
    bottom: $bottom;
  }
  @else if not(unitless($bottom)) {
    bottom: $bottom;
  }

  @if $left == auto {
    left: $left;
  }
  @else if not(unitless($left)) {
    left: $left;
  }
}
@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;

    @if $direction == up {
      border-bottom-color: $color;

    } @else if $direction == right {
      border-left-color:   $color;

    } @else if $direction == down {
      border-top-color:    $color;

    } @else if $direction == left {
      border-right-color:  $color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $size solid $color;

    @if $direction == up-right {
      border-left:  $size solid transparent;

    } @else if $direction == up-left {
      border-right: $size solid transparent;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $size solid $color;

    @if $direction == down-right {
      border-left:  $size solid transparent;

    } @else if $direction == down-left {
      border-right: $size solid transparent;
    }
  }
}

// Tell respond-min and respond-max to output all media queries by default

@mixin respond-min($width) {
    @if $viewport-width {
        @if $viewport-width >= $width {
            @content;    
        }
    }
    @else {
        @media screen and (min-width: $width) {
            @content;
        }
    }
}
@mixin respond-max($width) {
    @if $viewport-width {
        @if $viewport-width <= $width {
            @content;    
        }
    }
    @else {
        @media screen and (max-width: $width) {
            @content;
        }
    }
}
@mixin inline-block($alignment: none) {
    display: inline-block;
    @if $alignment and $alignment != none {
        vertical-align: $alignment; 
    }
    *vertical-align: auto;
    zoom: 1;
    *display: inline
}
// Apply this to your video container to have it scale responsively
// Use 75% for 4:3 videos
@mixin intrinsic-ratio($selector: '.scalable', $ratio: 56.25%) {
    position: relative;
    padding-bottom: $ratio;
    height: 0px;
    margin-bottom: 10px;
    #{$selector} {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
    }
}
//************************************************************************//
// Generate a variable ($all-text-inputs) with a list of all html5
// input types that have a text-based input, excluding textarea.
// http://diveintohtml5.org/forms.html
//************************************************************************//
$inputs-list: 'input[type="email"]',
              'input[type="number"]',
              'input[type="password"]',
              'input[type="search"]',
              'input[type="tel"]',
              'input[type="text"]',
              'input[type="url"]',

              // Webkit & Gecko may change the display of these in the future
              'input[type="color"]',
              'input[type="date"]',
              'input[type="datetime"]',
              'input[type="datetime-local"]',
              'input[type="month"]',
              'input[type="time"]',
              'input[type="week"]';

$unquoted-inputs-list: ();
@each $input-type in $inputs-list {
  $unquoted-inputs-list: append($unquoted-inputs-list, unquote($input-type), comma);
}

$all-text-inputs: $unquoted-inputs-list;


// Hover Pseudo-class
//************************************************************************//
$all-text-inputs-hover: ();
@each $input-type in $unquoted-inputs-list {
      $input-type-hover: $input-type + ":hover";
      $all-text-inputs-hover: append($all-text-inputs-hover, $input-type-hover, comma);
}

// Focus Pseudo-class
//************************************************************************//
$all-text-inputs-focus: ();
@each $input-type in $unquoted-inputs-list {
      $input-type-focus: $input-type + ":focus";
      $all-text-inputs-focus: append($all-text-inputs-focus, $input-type-focus, comma);
}

// You must use interpolation on the variable:
// #{$all-text-inputs}
// #{$all-text-inputs-hover}
// #{$all-text-inputs-focus}

// Example
//************************************************************************//
//   #{$all-text-inputs}, textarea {
//     border: 1px solid red;
//   }

