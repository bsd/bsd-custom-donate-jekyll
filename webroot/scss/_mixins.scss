//
// Foundation Mixins
// ----------------------

@mixin radius($radius:$global-radius) {
	@if $radius {
		border-radius: $radius;
	}
}

@mixin side-radius($side, $radius:$global-radius) {
	@if ($side == left or $side == right) {
		border-bottom-#{$side}-radius: $radius;
		border-top-#{$side}-radius: $radius;
	} @else {
		border-#{$side}-left-radius: $radius;
		border-#{$side}-right-radius: $radius;
	}
}

@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
	content: "";
	display: block;
	width: 0;
	height: 0;
	border: inset $triangle-size;
	@if ($triangle-direction == top) {
		border-color: $triangle-color transparent transparent transparent;
		border-top-style: solid;
	}
	@if ($triangle-direction == bottom) {
		border-color: transparent transparent $triangle-color transparent;
		border-bottom-style: solid;
	}
	@if ($triangle-direction == left) {
		border-color: transparent transparent transparent $triangle-color;
		border-left-style: solid;
	}
	@if ($triangle-direction == right) {
		border-color: transparent $triangle-color transparent transparent;
		border-right-style: solid;
	}
}

@mixin clearfix {
	&:before, &:after { content: " "; display: table; }
	&:after { clear: both; }
}

@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
	transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

	&:#{$selector} {
		box-shadow: 0 0 5px $glowing-effect-color;
		border-color: $glowing-effect-color;
	}
}

@mixin translate2d($horizontal:0, $vertical:0) {
	transform: translate($horizontal,$vertical)
}

@mixin element-invisible {
	position: absolute !important;
	height: 1px;
	width: 1px;
	overflow: hidden;
	clip: rect(1px, 1px, 1px, 1px);
}

@mixin element-invisible-off {
	position: static !important;
	height: auto;
	width: auto;
	overflow: visible;
	clip: auto;
}


//
// Font Sizing
// ----------------------

@mixin font-size($sizeValue: $default-font-size, $line-h: $default-line-height ){
	font-size: ($sizeValue * 1) + px;
	font-size: ($sizeValue / 16) + rem;
	line-height: $line-h;
}
@mixin font-size-only($sizeValue: $default-font-size){
	font-size: ($sizeValue * 1) + px;
	font-size: ($sizeValue / 16) + rem;
}
@mixin font-based-height($sizeValue: $default-font-size, $line-h: $default-line-height ){
	$line: $sizeValue * $line-h;
	height: ($line * 1) + px;
}


//
// Placeholders
// ----------------------

@mixin placeholder($color) {
	&::-webkit-input-placeholder {
		color: $color;
	}
	&:-moz-placeholder { /* Firefox 18- */
		color: $color;
	}
	&::-moz-placeholder {  /* Firefox 19+ */
		color: $color;
	}
	&:-ms-input-placeholder {
		color: $color;
	}
}


//
// 2x Background Images
// ----------------------
@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
				 (-o-min-device-pixel-ratio: 2.6/2),
				 (-webkit-min-device-pixel-ratio: 1.3),
				 (min-device-pixel-ratio: 1.3),
				 (min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
		background-repeat: no-repeat;
	}
}

@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

//
// BSD team's approved mixins
// ---------------------------
@mixin opacity($opacity){
	$ieop: floor($opacity * 100);
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=$ieop)";
	filter: alpha(opacity=$ieop);
	opacity: $opacity;
}

@mixin transition($trans: all, $duration: 0.1s, $function: linear) {
	-webkit-transition: $trans $duration $function;
	-moz-transition: $trans $duration $function;
	-o-transition: $trans $duration $function;
	-ms-transition: $trans $duration $function;
	transition: $trans $duration $function;
}
@mixin transition2($trans: all, $duration: 0.1s, $function: linear, $trans2: all, $duration2: 0.1s, $function2: linear) {
	-webkit-transition: $trans $duration $function, $trans2 $duration2 $function2;
	-moz-transition: $trans $duration $function, $trans2 $duration2 $function2;
	-o-transition: $trans $duration $function, $trans2 $duration2 $function2;
	-ms-transition: $trans $duration $function, $trans2 $duration2 $function2;
	transition: $trans $duration $function, $trans2 $duration2 $function2;
}


// Tell respond-min and respond-max to output all media queries by default
@mixin respond-min($width) {
	@if $viewport-width {
		@if $viewport-width >= $width {
			@content;
		}
	}
	@else {
		@media screen and (min-width: $width) {
			@content;
		}
	}
}
@mixin respond-max($width) {
	@if $viewport-width {
		@if $viewport-width <= $width {
			@content;
		}
	}
	@else {
		@media screen and (max-width: $width) {
			@content;
		}
	}
}
@mixin inline-block($alignment: none) {
	display: inline-block;
	@if $alignment and $alignment != none {
		vertical-align: $alignment;
	}
	*vertical-align: auto;
	zoom: 1;
	*display: inline
}
